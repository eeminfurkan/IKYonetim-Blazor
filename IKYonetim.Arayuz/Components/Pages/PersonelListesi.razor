@page "/personel-listesi"
@using IKYonetim.Varliklar
@using IKYonetim.Servisler
@inject PersonelServisi PServis

<h3>Personel Listesi</h3>
<a href="/personel-ekle" class="btn btn-primary mb-3">Yeni Personel Ekle</a>
@if (personeller == null)
{
    <p><em>Personel verileri yükleniyor...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Ad</th>
                <th>Soyad</th>
                <th>Departman</th>
                <th>Pozisyon</th>
                <th>İşlemler</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var personel in personeller)
            {
                <tr>
                    <td>@personel.Ad</td>
                    <td>@personel.Soyad</td>
                    <td>@personel.Departman</td>
                    <td>@personel.Pozisyon</td>
                    <td>
                        <button class="btn btn-danger" @onclick="() => SilmeIsleminiBaslat(personel.Id)">Sil</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}


@code {
    // Sayfanın kullanacağı personel listesi. Başlangıçta boş (null).
    private List<Personel> personeller;

    // Bu metot, sayfa ilk yüklendiğinde Blazor tarafından otomatik olarak çalıştırılır.
    // Verileri çekmek için en doğru yer burasıdır.
    protected override async Task OnInitializedAsync()
    {
        // Servisimizden tüm personelleri getirmesini istiyoruz.
        personeller = PServis.TumPersonelleriGetir();
    }

    private void SilmeIsleminiBaslat(int personelId)
    {
        // Servis aracılığıyla personeli siliyoruz.
        PServis.PersonelSil(personelId);

        // Listeyi yeniden yüklemeye gerek yok, çünkü Blazor Server'da
        // liste üzerinde yapılan değişiklikler arayüze otomatik yansır.
        // Ancak bazen büyük işlemlerde yeniden yükleme gerekebilir.
        // Şimdilik listeyi yeniden çekerek arayüzü güncellemeyi garantileyelim.
        personeller = PServis.TumPersonelleriGetir();
    }
}